import telebot
from telebot import types
import random
import json
import os
import time
from datetime import datetime, timedelta
from collections import OrderedDict
from collections import defaultdict
import shutil
from tempfile import NamedTemporaryFile
from datetime import datetime

bot = telebot.TeleBot(os.getenv('TOKEN'))
DATA_FILE = 'user_data.json'
REFILL_AMOUNT = 100
REFILL_COOLDOWN = 6 * 60 * 60  
INITIAL_BALANCE = 250  
BACKUP_DIR = 'backups'
os.makedirs(BACKUP_DIR, exist_ok=True)
ADMIN_USERNAME = "mqproga"  
WITHDRAW_RATE = 0.00005  
MIN_WITHDRAW = 1000  
ADMIN_CHAT_ID = '2103978046'  

collectible_items = [
    {"name": "–ö–∏–Ω–∂–∞–ª –õ—É–Ω–Ω—ã–π –°–≤–µ—Ç", "price": 1200000, "emoji": "üåô"},  
    {"name": "–ß–∞—Å—ã '–ó–æ–ª–æ—Ç–æ–π –í–µ–∫'", "price": 5000000, "emoji": "‚åõ"},  
    {"name": "–ö–∞—Ä—Ç–∏–Ω–∞ '–ö—Ä–∏–∫ –î—Ä–∞–∫–æ–Ω–∞'", "price": 8500000, "emoji": "üêâ"},  
    {"name": "–ö–æ–ª—å—Ü–æ –ë–µ–∑–º–æ–ª–≤–∏—è", "price": 3200000, "emoji": "üíç"},  
    {"name": "–†–µ–¥–∫–∏–π –í–∏–Ω—Ç–∞–∂–Ω—ã–π –ü–æ–Ω—á–∏–∫", "price": 999999, "emoji": "üç©"},  
    {"name": "–ë–∏–ª–µ—Ç –Ω–∞ –¢–∏—Ç–∞–Ω–∏–∫", "price": 15000000, "emoji": "üö¢"}  
]

EMOJI = {
    "money": "üí∞",
    "case": "üéÅ",
    "item": "üî´",
    "back": "üîô",
    "take": "‚úÖ",
    "invest": "üîÑ",
    "cancel": "‚ùå",
    "win": "üéâ",
    "lose": "üíÄ",
    "clock": "‚è≥",
    "top": "üèÜ",
    "user": "üë§",
    "info": "‚ÑπÔ∏è",  
    "common": "üü¢",  
    "uncommon": "üîµ",
    "rare": "üü£",
    "mythical": "üü†",
    "legendary": "üü£",
    "profile": "üë§"
}

cases = OrderedDict([
    ("–ë–∞–∑–æ–≤—ã–π", {
        "price": 20,
        "emoji": "üîπ",
        "items": [
            {"name": "P250 | –ü–µ—Å–æ—á–Ω–∞—è –¥—é–Ω–∞", "value": 10, "weight": 40},
            {"name": "MP9 | –ü–µ—Å–æ—á–Ω–∞—è —è–º–∞", "value": 15, "weight": 30},
            {"name": "Sawed-Off | –†–∂–∞–≤—á–∏–Ω–∞", "value": 20, "weight": 20},
            {"name": "PP-Bizon | –û—Å–µ–Ω–Ω–∏–π –ª–µ—Å", "value": 25, "weight": 8},
            {"name": "MAC-10 | –ü–∞–ª—å–º–∞", "value": 30, "weight": 2}
        ]
    }),
    ("–ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–π", {
        "price": 50,
        "emoji": "üìú",
        "items": [
            {"name": "Glock-18 | –í–æ–¥—è–Ω–∞—è —Å—Ç–∏—Ö–∏—è", "value": 40, "weight": 35},
            {"name": "Desert Eagle | –ö–æ–±—Ä–∞", "value": 50, "weight": 25},
            {"name": "AK-47 | –≠–ª–∏—Ç–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ", "value": 55, "weight": 20},
            {"name": "M4A4 | –ö—Ä—É—à–∏—Ç–µ–ª—å", "value": 60, "weight": 8},
            {"name": "AWP | –§–æ–±–æ—Å", "value": 70, "weight": 2}
        ]
    }),
    ("–ó–∞–ø—Ä–µ—Ç–Ω—ã–π", {
        "price": 100,
        "emoji": "üö´",
        "items": [
            {"name": "AWP | –ê–∑–∏–º–æ–≤", "value": 50, "weight": 40},
            {"name": "Karambit | –ù–æ—á–Ω–∞—è –ø–æ–ª–æ—Å–∞", "value": 80, "weight": 30},
            {"name": "M4A1-S | –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "value": 110, "weight": 20},
            {"name": "USP-S | –ö–∏–ª–∫–æ–Ω—Ñ–∏—Ä–º", "value": 120, "weight": 10},
            {"name": "Desert Eagle | –ü—Ä—è–º–æ–π —É–¥–∞—Ä", "value": 150, "weight": 8}
        ]
    }),
    ("–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", {
        "price": 200,
        "emoji": "üåü",
        "items": [
            {"name": "AWP | –î—Ä–∞–∫–æ–Ω –õ–æ—Ä", "value": 130, "weight": 80},
            {"name": "Karambit | –£–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç", "value": 180, "weight": 20},
            {"name": "M4A4 | –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π –ø–∞–ª–∞—á", "value": 250, "weight": 10},
            {"name": "Butterfly Knife | –õ–µ—Å–Ω–∞—è –Ω–æ—á—å", "value": 280, "weight": 8},
            {"name": "Desert Eagle | –ë–ª–µ–Ω–¥–µ—Ä", "value": 320, "weight": 2}
        ]
    }),
    ("–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π", {
        "price": 350,
        "emoji": "‚ú®",
        "items": [
            {"name": "AWP | –ú–µ–¥—É–∑–∞", "value": 270, "weight": 50},
            {"name": "Karambit | –°–∞–ø—Ñ–∏—Ä", "value": 290, "weight": 30},
            {"name": "M4A4 | –ö–∞–∫—Ç—É—Å", "value": 380, "weight": 20},
            {"name": "Butterfly Knife | –§–∞–∑–∞ 2", "value": 480, "weight": 10},
            {"name": "Desert Eagle | –ü–ª–∞–º—è", "value": 500, "weight": 5}
        ]
    }),
    ("–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", {
        "price": 500,
        "emoji": "üëë",
        "items": [
            {"name": "AWP | –ö–Ω—è–∑—å —Ç—å–º—ã", "value": 320, "weight": 80},
            {"name": "Karambit | –†—É–±–∏–Ω", "value": 456, "weight": 30},
            {"name": "M4A4 | –ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "value": 550, "weight": 20},
            {"name": "Butterfly Knife | –ì–∞–º–º–∞-–≤–æ–ª–Ω–∞", "value": 600, "weight": 10},
            {"name": "Desert Eagle | –ó–æ–ª–æ—Ç–æ–π –∑–º–µ–π", "value": 650, "weight": 8}
        ]
    }),
    ("–ê–Ω–≥–µ–ª—å—Å–∫–∏–π", {
        "price": 800,
        "emoji": "üòá",
        "items": [
            {"name": "AWP | –ö–æ—Ä–æ–ª—å –¥—Ä–∞–∫–æ–Ω–æ–≤", "value": 680, "weight": 80},
            {"name": "Karambit | –ß–µ—Ä–Ω—ã–π –∂–µ–º—á—É–≥", "value": 750, "weight": 20},
            {"name": "M4A4 | –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—É–±–µ–∂", "value": 780, "weight": 10},
            {"name": "Butterfly Knife | –ú—Ä–∞–º–æ—Ä–Ω—ã–π —É–∑–æ—Ä", "value": 800, "weight": 5},
            {"name": "Desert Eagle | –ó–æ–ª–æ—Ç–∞—è –∫–∞—Ç—É—à–∫–∞", "value": 850, "weight": 1}
        ]
    }),
    ("–¶–∞—Ä—Å–∫–∏–π", {
        "price": 1500,
        "emoji": "ü´Ö",
        "items": [
            {"name": "AWP | –¶–∞—Ä—Å–∫–∞—è —Ä–æ—Å–∫–æ—à—å", "value": 950, "weight": 80},
            {"name": "AUG | –ü–µ—Ä–µ–ø–ª–µ—Ç–µ–Ω–∏–µ", "value": 1200, "weight": 20},
            {"name": "M4A4 | –î–≤–∞–∂–¥—ã —à–µ—Å—Ç—å", "value": 1600, "weight": 10},
            {"name": "Knife | –ú—Ä–∞–º–æ—Ä", "value": 1800, "weight": 5},
            {"name": "Desert Eagle | –ü–æ—Å–µ—Ä–±—Ä–µ–Ω–Ω—ã–π", "value": 2000, "weight": 1}
        ]
    }),
    ("–ê–ª–º–∞–∑–Ω—ã–π", {
        "price": 4500,
        "emoji": "üíé",
        "items": [
            {"name": "AUG | –ê–ª–º–∞–∑–Ω–∞—è –º–æ—â—å", "value": 3200, "weight": 90},
            {"name": "AWP | –î—Ä–∞–≥–æ–Ω –õ–æ—Ä", "value": 3700, "weight": 12},
            {"name": "Knife | –ü—Ä–∞–º–æ—É—Ç–µ—Ä", "value": 4500, "weight": 10},
            {"name": "M4A4 | –ê–ª–º–∞–∑–Ω—ã–π –∫—Ä–∞–Ω", "value": 5000, "weight": 5},
            {"name": "Desert Eagle | –¢—Ä–∏—Ç–æ–Ω", "value": 5200, "weight": 1}
        ]
    })
])

def get_weighted_random_item(case_items):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤"""
    total_weight = sum(item["weight"] for item in case_items)
    random_num = random.uniform(0, total_weight)
    cumulative_weight = 0
    
    for item in case_items:
        cumulative_weight += item["weight"]
        if random_num <= cumulative_weight:
            return item
    
    return case_items[0]  # fallback
def reset_all_users():
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump({}, f)
    print("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã")

def repair_data_file():
    try:
        with open('user_data.json', 'w', encoding='utf-8') as f:
            json.dump({}, f)
        print("–§–∞–π–ª user_data.json —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

def make_backup():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if os.path.exists(DATA_FILE):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_name = os.path.join(BACKUP_DIR, f"user_data_{timestamp}.json")
        shutil.copy2(DATA_FILE, backup_name)

def load_data():
    """–ù–∞–¥–µ–∂–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    if not os.path.exists(DATA_FILE):
        return {}
    
    for attempt in range(3):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            backup_dir = 'backups'
            if os.path.exists(backup_dir):
                backups = sorted(
                    [f for f in os.listdir(backup_dir) if f.startswith('user_data_')],
                    reverse=True
                )
                if backups:
                    latest_backup = os.path.join(backup_dir, backups[0])
                    print(f"‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ {latest_backup}")
                    shutil.copy2(latest_backup, DATA_FILE)
                    continue
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            if attempt == 2:
                print("‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
                return {}
            time.sleep(0.5)
    return {}

def save_data(data):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Ñ–∞–π–ª–æ–≤"""
    max_retries = 3
    backup_dir = 'backups'
    os.makedirs(backup_dir, exist_ok=True)  
    for attempt in range(max_retries):
        try:
            temp_file = None
            try:
                temp_file = NamedTemporaryFile(
                    mode='w', 
                    encoding='utf-8',
                    prefix='user_data_',
                    suffix='.tmp',
                    dir=os.path.dirname(DATA_FILE),
                    delete=False
                )
                json.dump(data, temp_file, ensure_ascii=False, indent=2)
                temp_file.close()
                if os.path.exists(DATA_FILE):
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    backup_path = os.path.join(backup_dir, f"user_data_{timestamp}.json")
                    shutil.copy2(DATA_FILE, backup_path)
                if os.path.exists(DATA_FILE):
                    os.replace(temp_file.name, DATA_FILE)
                else:
                    os.rename(temp_file.name, DATA_FILE)             
                return True      
            except Exception as e:
                if temp_file and os.path.exists(temp_file.name):
                    os.unlink(temp_file.name)
                raise          
        except PermissionError:
            if attempt == max_retries - 1:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                return False
            time.sleep(0.5 * (attempt + 1)) 
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
            
    return False

def init_user(user_id, username=None):
    data = load_data()
    user_id_str = str(user_id)
    
    if user_id_str not in data:
        data[user_id_str] = {
            "balance": INITIAL_BALANCE,
            "last_item": None,
            "last_case": None,
            "last_messages": [],
            "last_refill": None,
            "username": username or f"–ò–≥—Ä–æ–∫_{user_id}",
            "banned": False,
            "inventory": [],
            "last_messages": [], 
            "inventory": [] 
        }
    else:
        if "inventory" not in data[user_id_str]:
            data[user_id_str]["inventory"] = []
        if username:
            data[user_id_str]["username"] = username
    
    save_data(data)
    return data[user_id_str]

def update_user(user_id, key, value):
    data = load_data()
    data[str(user_id)][key] = value
    save_data(data)

def is_admin(user):
    return user.username and user.username.lower() == ADMIN_USERNAME.lower()

def add_message_to_delete(user_id, message_id):
    data = load_data()
    if "last_messages" not in data[str(user_id)]:
        data[str(user_id)]["last_messages"] = []
    data[str(user_id)]["last_messages"].append(message_id)
    save_data(data)

def clean_messages(user_id, chat_id):
    data = load_data()
    if str(user_id) in data and "last_messages" in data[str(user_id)]:
        for msg_id in data[str(user_id)]["last_messages"]:
            try:
                bot.delete_message(chat_id, msg_id)
            except:
                pass
        data[str(user_id)]["last_messages"] = []
        save_data(data)

def create_main_keyboard(user_id):
    user = init_user(user_id)
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    for case_name in cases:
        if user["balance"] >= cases[case_name]["price"]:
            buttons.append(types.InlineKeyboardButton(
                text=f"{cases[case_name]['emoji']} {case_name} - {cases[case_name]['price']}‚ÇΩ",
                callback_data=f"case_{case_name}"
            ))
    for i in range(0, len(buttons), 2):
        keyboard.add(*buttons[i:i+2])
    keyboard.row(
        types.InlineKeyboardButton(text=f"{EMOJI['money']} –ü–æ–ø–æ–ª–Ω–∏—Ç—å (+100‚ÇΩ)", callback_data="refill_balance"),
        types.InlineKeyboardButton(text=f"{EMOJI['case']} –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="show_inventory")
    )
    keyboard.row(
        types.InlineKeyboardButton(text=f"{EMOJI['top']} –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="show_top")
    )
    
    keyboard.row(
        types.InlineKeyboardButton(text="üõí –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data="buy_collectible")
    )
    keyboard.row(
    types.InlineKeyboardButton(text=f"{EMOJI['profile']} –ü—Ä–æ—Ñ–∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤", callback_data="view_profile")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="üí≥ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")
    )
    if user.get("username", "").lower() == ADMIN_USERNAME.lower():
        keyboard.row(
            types.InlineKeyboardButton(text="üõë –ó–∞–±–∞–Ω–∏—Ç—å", callback_data="admin_ban"),
            types.InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="admin_unban")
        )
        keyboard.row(
            types.InlineKeyboardButton(text="üîÅ –û–±–Ω—É–ª–∏—Ç—å", callback_data="admin_reset"),
            types.InlineKeyboardButton(text="üí∞ –ó–∞—á–∏—Å–ª–∏—Ç—å", callback_data="admin_add_money")    
        )
        keyboard.row(
            types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")     
        )
        keyboard.row(
            types.InlineKeyboardButton(text="üß∫ –û–±–Ω—É–ª–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="admin_clear_inventory")   
        )
        keyboard.row(
            types.InlineKeyboardButton(text="üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="admin_view_inventory")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        )
    
    return keyboard

def process_withdraw_details(message, amount):
    try:
        user_id = message.from_user.id
        user = init_user(user_id)
        details = message.text.strip()
        if len(details) < 20:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤")
            return
        real_amount = amount * WITHDRAW_RATE
        new_balance = user["balance"] - amount
        update_user(user_id, "balance", new_balance)
        save_withdraw_request(user_id, amount, real_amount, details)
        bot.send_message(
            message.chat.id,
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üí∏ –°—É–º–º–∞: {amount}‚ÇΩ ({real_amount:.2f} —Ä—É–±.)\n"
            f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: \n<code>{details}</code>\n\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ\n"
            f"‚è≥ –í—ã–≤–æ–¥ –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è",
            parse_mode="HTML"
        )
        notify_admin(
            f"üì§ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.get('username', user_id)}\n"
            f"üí∏ –°—É–º–º–∞: {amount}‚ÇΩ ({real_amount:.2f} —Ä—É–±.)\n"
            f"üí≥ –î–∞–Ω–Ω—ã–µ: {details}"
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_withdraw_details: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤")

def save_withdraw_request(user_id, amount, real_amount, details):
    """–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥: {user_id}, {amount}‚ÇΩ, {real_amount} —Ä—É–±., {details}")

def notify_admin(text):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    try:
        if not ADMIN_CHAT_ID or ADMIN_CHAT_ID == '–í–ê–®_CHAT_ID':
            print("‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return False
        parts = text.split("\n")
        sensitive_data = parts[-1]
        main_message = "\n".join(parts[:-1])
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                text="üîí –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
                callback_data=f"show_details_{hash(sensitive_data)}"
            )
        )
        bot.send_message(
            ADMIN_CHAT_ID,
            main_message,
            reply_markup=keyboard
        )
        global temp_details
        temp_details[hash(sensitive_data)] = sensitive_data
        
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
        return False

temp_details = {}

def process_withdraw_amount(message):
    try:
        user_id = message.from_user.id
        user = init_user(user_id)  
        try:
            amount = int(message.text)
            if amount < MIN_WITHDRAW:
                bot.reply_to(message, f"‚ùå –°—É–º–º–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π ({MIN_WITHDRAW}‚ÇΩ)")
                return
            if amount > user["balance"]:
                bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
                return
        except ValueError:
            bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
            return
        msg = bot.send_message(
            message.chat.id,
            "üí≥ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>–ë–∞–Ω–∫ –ù–∞–∑–≤–∞–Ω–∏–µ\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n–ò–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–¢–∏–Ω—å–∫–æ—Ñ—Ñ\n5536911234567890\n–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
            parse_mode="HTML",
            reply_markup=types.ForceReply()
        )
        bot.register_next_step_handler(
            msg, 
            lambda m: process_withdraw_details(m, amount)
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_withdraw_amount: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã")

def create_action_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(
            text=f"{EMOJI['take']} –ó–∞–±—Ä–∞—Ç—å",
            callback_data="action_take"
        ),
        types.InlineKeyboardButton(
            text=f"{EMOJI['invest']} –í–ª–æ–∂–∏—Ç—å",
            callback_data="action_invest"
        )
    )
    keyboard.add(
        types.InlineKeyboardButton(
            text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
            callback_data="action_back"
        )
    )
    return keyboard

def create_invest_keyboard(user_id):
    user = init_user(user_id)
    item_value = user["last_item"]["value"] if user["last_item"] else 0
    balance = user["balance"] 
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [] 
    for case_name, case_data in cases.items():
        actual_price = case_data["price"] - item_value
        if balance >= actual_price or item_value >= case_data["price"]:
            buttons.append(types.InlineKeyboardButton(
                text=f"{case_data['emoji']} {case_name}",
                callback_data=f"invest_{case_name}"
            )) 
    for i in range(0, len(buttons), 2):
        keyboard.add(*buttons[i:i+2])
    
    keyboard.add(
        types.InlineKeyboardButton(
            text=f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞",
            callback_data="action_cancel"
        )
    )
    return keyboard

def make_backup():
    if os.path.exists(DATA_FILE):
        backup_dir = 'backups'
        if not os.path.exists(backup_dir):
            os.makedirs(backup_dir)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_name = os.path.join(backup_dir, f"user_data_{timestamp}.json")
        shutil.copy2(DATA_FILE, backup_name)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    init_user(user_id, username)
    clean_messages(user_id, message.chat.id)
    user = init_user(user_id)
    if user.get("banned", False):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
        bot.send_message(message.chat.id, "‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞")
        return
    msg = bot.send_message(
        message.chat.id,
        f"{EMOJI['money']} <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{user['balance']} —Ä—É–±.</code>\n"
        f"{EMOJI['case']} <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å:</b>",
        parse_mode="HTML",
        reply_markup=create_main_keyboard(user_id)
    )
    add_message_to_delete(user_id, msg.message_id)

@bot.callback_query_handler(func=lambda call: call.data == 'admin_view_inventory')
def admin_view_inventory_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'"""
    if not is_admin(call.from_user):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton(text="üÜî –ü–æ Telegram ID", callback_data="view_inventory_by_id"),
        types.InlineKeyboardButton(text="@ –ü–æ —é–∑–µ—Ä–Ω–µ–π–º—É", callback_data="view_inventory_by_username")
    )
    keyboard.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel"))  
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üî¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:",
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data == 'view_inventory_by_id')
def view_inventory_by_id_handler(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç Telegram ID –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
    if not is_admin(call.from_user):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return 
    msg = bot.send_message(
        call.message.chat.id,
        "üìù –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=types.ForceReply()
    )
    bot.register_next_step_handler(msg, process_view_inventory_by_id)

def process_view_inventory_by_id(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Telegram ID –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"""
    try:
        user_id = int(message.text)
        data = load_data()      
        if str(user_id) in data:
            user = data[str(user_id)]
            inventory = user.get("inventory", [])
            if inventory:
                inventory_text = "\n".join([f"{item['name']} ({item['value']}‚ÇΩ)" for item in inventory])
                bot.reply_to(message, f"üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}:\n{inventory_text}")
            else:
                bot.reply_to(message, f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –ø—É—Å—Ç.")
        else:
            bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        bot.reply_to(message, "‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

@bot.callback_query_handler(func=lambda call: call.data == 'view_profile')
def view_profile_callback(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ TG ID –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        user_id = call.from_user.id
        user = init_user(user_id)      
        if user.get("banned", False):
            bot.answer_callback_query(call.id, "‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!", show_alert=True)
            return
        msg = bot.send_message(
            call.message.chat.id,
            "üîç –í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username) –∏–ª–∏ TG ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=types.ForceReply(selective=True)
        )
        clean_messages(user_id, call.message.chat.id)
        add_message_to_delete(user_id, msg.message_id)
        bot.answer_callback_query(call.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ view_profile_callback: {e}")
        error_msg = bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ—Ñ–∏–ª—è")
        add_message_to_delete(user_id, error_msg.message_id)

@bot.message_handler(func=lambda message: message.reply_to_message and "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º" in message.reply_to_message.text)
def search_profile_handler(message):
    """–ò—â–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É –∏–ª–∏ ID."""
    try:
        user_id = message.from_user.id
        search_query = message.text.strip()
        data = load_data()
        if search_query.startswith("@"):
            username = search_query[1:].lower()
            target_user = next((user for user in data.values() 
                              if user.get("username", "").lower() == username), None)
        elif search_query.isdigit():
            target_user = data.get(search_query)
        else:
            bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ username (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @) –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID")
            return
        if not target_user:
            bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        profile_text = "üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        profile_text += f"üÜî TG ID: {target_user.get('user_id', 'N/A')}\n"
        profile_text += f"üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: @{target_user.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        profile_text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {target_user.get('balance', 0)} —Ä—É–±.\n\n"
        collectibles = [item for item in target_user.get('inventory', []) 
                       if item.get('collectible', False)]      
        if collectibles:
            profile_text += "üåü –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–∫–∏–Ω—ã:\n"
            for item in collectibles:
                date = item.get('purchase_date', '–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
                profile_text += f"üîπ {item['name']} (–∫—É–ø–ª–µ–Ω: {date})\n"
        else:
            profile_text += "üåü –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–∫–∏–Ω—ã: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
        bot.reply_to(message, profile_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ search_profile_handler: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")

@bot.callback_query_handler(func=lambda call: call.data == 'view_inventory_by_username')
def view_inventory_by_username_handler(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
    if not is_admin(call.from_user):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    
    msg = bot.send_message(
        call.message.chat.id,
        "üìù –í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):",
        reply_markup=types.ForceReply()
    )
    bot.register_next_step_handler(msg, process_view_inventory_by_username)

def process_view_inventory_by_username(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"""
    username_to_view = message.text.strip().lower()
    data = load_data()
    
    found = False
    for user_id, user_data in data.items():
        if user_data.get("username", "").lower() == username_to_view:
            inventory = user_data.get("inventory", [])
            if inventory:
                inventory_text = "\n".join([f"{item['name']} ({item['value']}‚ÇΩ)" for item in inventory])
                bot.reply_to(message, f"üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username_to_view}:\n{inventory_text}")
            else:
                bot.reply_to(message, f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username_to_view} –ø—É—Å—Ç.")
            found = True
            break
    
    if not found:
        bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_to_view} –Ω–µ –Ω–∞–π–¥–µ–Ω")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_clear_inventory')
def admin_clear_inventory_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–û–±–Ω—É–ª–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'"""
    if not is_admin(call.from_user):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton(text="üÜî –ü–æ Telegram ID", callback_data="clear_inventory_by_id"),
        types.InlineKeyboardButton(text="@ –ü–æ —é–∑–µ—Ä–Ω–µ–π–º—É", callback_data="clear_inventory_by_username")
    )
    keyboard.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel"))
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üî¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:",
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data == 'clear_inventory_by_id')
def clear_inventory_by_id_handler(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç Telegram ID –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
    if not is_admin(call.from_user):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    
    msg = bot.send_message(
        call.message.chat.id,
        "üìù –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=types.ForceReply()
    )
    bot.register_next_step_handler(msg, process_clear_inventory_by_id)

def process_clear_inventory_by_id(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Telegram ID –∏ –æ–±–Ω—É–ª—è–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"""
    try:
        user_id = int(message.text)
        data = load_data()      
        if str(user_id) in data:
            data[str(user_id)]["inventory"] = []  # –û–±–Ω—É–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            save_data(data)
            bot.reply_to(message, f"‚úÖ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω!")
        else:
            bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        bot.reply_to(message, "‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

@bot.callback_query_handler(func=lambda call: call.data == 'clear_inventory_by_username')
def clear_inventory_by_username_handler(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
    if not is_admin(call.from_user):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return  
    msg = bot.send_message(
        call.message.chat.id,
        "üìù –í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):",
        reply_markup=types.ForceReply()
    )
    bot.register_next_step_handler(msg, process_clear_inventory_by_username)

def process_clear_inventory_by_username(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º –∏ –æ–±–Ω—É–ª—è–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"""
    username_to_clear = message.text.strip().lower()
    data = load_data() 
    found = False
    for user_id, user_data in data.items():
        if user_data.get("username", "").lower() == username_to_clear:
            user_data["inventory"] = [] 
            save_data(data)
            found = True  
    if found:
        bot.reply_to(message, f"‚úÖ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username_to_clear} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω!")
    else:
        bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_to_clear} –Ω–µ –Ω–∞–π–¥–µ–Ω")

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_details_'))
def show_details_callback(call):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∞–¥–º–∏–Ω—É –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏"""
    try:
        if not is_admin(call.from_user):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return          
        detail_hash = int(call.data.split('_')[2])
        details = temp_details.get(detail_hash)     
        if details:
            card_parts = details.split('\n')
            if len(card_parts) >= 2:
                card_number = card_parts[1]
                masked_card = card_number[:6] + '*'*(len(card_number)-10) + card_number[-4:]
                card_parts[1] = masked_card
                masked_details = '\n'.join(card_parts)
            else:
                masked_details = details       
            bot.send_message(
                call.message.chat.id,
                f"üîê <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n<code>{masked_details}</code>",
                parse_mode="HTML"
            )
            bot.answer_callback_query(call.id)
            temp_details.pop(detail_hash, None)
        else:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏")          
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_details_callback: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

def process_withdraw_details(message, amount):
    try:
        user_id = message.from_user.id
        user = init_user(user_id)      
        details = message.text.strip()
        if len(details) < 20 or '\n' not in details:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –±–∞–Ω–∫, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ –∏–º—è, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏")
            return        
        real_amount = amount * WITHDRAW_RATE
        new_balance = user["balance"] - amount
        update_user(user_id, "balance", new_balance)
        admin_msg = (
            f"üì§ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.get('username', user_id)}\n"
            f"üÜî ID: {user_id}\n"
            f"üí∏ –°—É–º–º–∞: {amount}‚ÇΩ ({real_amount:.2f} —Ä—É–±.)\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"{details}"  # –†–µ–∫–≤–∏–∑–∏—Ç—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ notify_admin
        )
        if not notify_admin(admin_msg):
            bot.reply_to(message, "‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return
        bot.send_message(
            message.chat.id,
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{hash(details)%10000} –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
            f"üí∏ –°—É–º–º–∞: {amount}‚ÇΩ ({real_amount:.2f} —Ä—É–±.)\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ\n\n"
            f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤\n"
            f"üì© –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @{ADMIN_USERNAME}",
            parse_mode="HTML"
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_withdraw_details: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏")

@bot.callback_query_handler(func=lambda call: call.data.startswith('case_'))
def case_callback(call):
    try:
        user_id = call.from_user.id
        case_name = call.data.split('_')[1]
        case = cases[case_name]
        user = init_user(user_id)       
        if user.get("banned", False):
            bot.answer_callback_query(call.id, "‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!", show_alert=True)
            return
        if user["balance"] < case["price"]:
            bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        new_balance = user["balance"] - case["price"]
        update_user(user_id, "balance", new_balance)
        item = get_weighted_random_item(case["items"])
        update_user(user_id, "last_item", item)
        update_user(user_id, "last_case", case_name)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton(text=f"{EMOJI['take']} –ó–∞–±—Ä–∞—Ç—å (+{item['value']}‚ÇΩ)", 
                                     callback_data="action_take"),
            types.InlineKeyboardButton(text=f"{EMOJI['invest']} –í–ª–æ–∂–∏—Ç—å", 
                                     callback_data="action_invest")
        )
        bot.send_message(
            call.message.chat.id,
            f"{EMOJI['win']} <b>–í—ã –æ—Ç–∫—Ä—ã–ª–∏ {case_name} –∫–µ–π—Å!</b>\n\n"
            f"{EMOJI['item']} <b>–ü—Ä–µ–¥–º–µ—Ç:</b> <code>{item['name']}</code>\n"
            f"{EMOJI['money']} <b>–¶–µ–Ω–∞:</b> <code>{item['value']}‚ÇΩ</code>\n"
            f"{EMOJI['info']} <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {get_rarity_emoji(item['weight'])}\n\n"
            f"{EMOJI['money']} <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{new_balance}‚ÇΩ</code>",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ case_callback: {e}")
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞")

def get_rarity_emoji(weight):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏"""
    if weight >= 30: return f"{EMOJI['common']} –û–±—ã—á–Ω—ã–π"
    elif weight >= 15: return f"{EMOJI['uncommon']} –ù–µ–æ–±—ã—á–Ω—ã–π"
    elif weight >= 5: return f"{EMOJI['rare']} –†–µ–¥–∫–∏–π"
    elif weight >= 2: return f"{EMOJI['mythical']} –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π"
    else: return f"{EMOJI['legendary']} –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π"

@bot.callback_query_handler(func=lambda call: call.data == 'buy_collectible')
def buy_collectible_handler(call):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    user_id = call.from_user.id
    user = init_user(user_id)
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for item in collectible_items:
        if user["balance"] >= item["price"]:
            keyboard.add(types.InlineKeyboardButton(
                text=f"{item['emoji']} {item['name']} - {item['price']:,} —Ä—É–±.",  # –ó–∞–º–µ–Ω—è–µ–º ‚ÇΩ –Ω–∞ —Ä—É–±.
                callback_data=f"buy_item_{item['name']}"
            ))
        else:
            keyboard.add(types.InlineKeyboardButton(
                text=f"‚ùå {item['emoji']} {item['name']} - {item['price']:,} —Ä—É–±. (–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)",  # –ó–∞–º–µ–Ω—è–µ–º ‚ÇΩ –Ω–∞ —Ä—É–±.
                callback_data="not_enough_balance"
            ))
    keyboard.add(types.InlineKeyboardButton(text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", callback_data="action_back"))
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üõí –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=keyboard
    )


@bot.callback_query_handler(func=lambda call: call.data == 'not_enough_balance')
def not_enough_balance_handler(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"""
    bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_item_'))
def buy_item_handler(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    user_id = call.from_user.id
    user = init_user(user_id)
    
    item_name = call.data.split('_', 3)[2]
    item = next((item for item in collectible_items if item["name"] == item_name), None)
    
    if not item:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if user["balance"] < item["price"]:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
        return
    
    # –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    user["balance"] -= item["price"]
    user["inventory"].append({
        "name": item["name"],
        "value": item["price"],
        "collectible": True,
        "purchase_date": datetime.now().strftime("%d.%m.%Y %H:%M")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏
    })
    update_user(user_id, "balance", user["balance"])
    update_user(user_id, "inventory", user["inventory"])
    
    bot.answer_callback_query(call.id)
    bot.send_message(
        call.message.chat.id,
        f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {item['emoji']} <b>{item['name']}</b> –∑–∞ {item['price']:,} —Ä—É–±.!",
        parse_mode="HTML",
        reply_markup=create_main_keyboard(user_id)
    )

@bot.callback_query_handler(func=lambda call: call.data == 'show_inventory')
def inventory_callback(call):
    try:
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        user = init_user(user_id)
        
        if user.get("banned", False):
            bot.answer_callback_query(call.id, "‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!", show_alert=True)
            return
        
        clean_messages(user_id, chat_id)
        
        if not user.get("inventory", []):
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
                    callback_data="action_back"
                )
            )
            msg = bot.send_message(
                chat_id,
                "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç",
                reply_markup=keyboard
            )
            add_message_to_delete(user_id, msg.message_id)
            return
        
        keyboard = types.InlineKeyboardMarkup()
        
        # –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–¥–∞–∂–∏
        if user["inventory"]:
            total_value = sum(item["value"] for item in user["inventory"])
            sell_all_price = int(total_value * 0.55)
            keyboard.add(
                types.InlineKeyboardButton(
text=f"‚ö° –ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ ({len(user['inventory'])}) ‚Üí {sell_all_price}‚ÇΩ",
                    callback_data="sell_all_items"
                )
            )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        for index, item in enumerate(user["inventory"]):
            sell_price = int(item["value"] * 0.55)
            keyboard.add(
                types.InlineKeyboardButton(
                    text=f"{item['name']} ({item['value']}‚ÇΩ ‚Üí {sell_price}‚ÇΩ)",
                    callback_data=f"sell_item_{index}"
                )
            )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.add(
            types.InlineKeyboardButton(
                text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
                callback_data="action_back"
            )
        )
        
        msg = bot.send_message(
            chat_id, 
            f"üéí *–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:*\n–ü—Ä–æ–¥–∞–∂–∞ –∑–∞ 55% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏\nüì¶ –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {len(user['inventory'])}",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        add_message_to_delete(user_id, msg.message_id)
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ inventory_callback: {e}")
        error_msg = bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
        add_message_to_delete(user_id, error_msg.message_id)

@bot.callback_query_handler(func=lambda call: call.data == 'sell_all_items')
def sell_all_items_callback(call):
    try:
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        user = init_user(user_id)
        
        if user.get("banned", False):
            bot.answer_callback_query(call.id, "‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!", show_alert=True)
            return
        
        if not user.get("inventory", []):
            bot.answer_callback_query(call.id, "‚ùå –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        items_to_sell = [item for item in user["inventory"] if not item.get("collectible", False)]
        collectible_items = [item for item in user["inventory"] if item.get("collectible", False)]
        
        if not items_to_sell:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (—Ç–æ–ª—å–∫–æ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ)!", show_alert=True)
            return
        
        # –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂–∏
        total = sum(item["value"] for item in items_to_sell)
        amount = int(total * 0.55)
        count = len(items_to_sell)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        new_balance = user["balance"] + amount
        update_user(user_id, "balance", new_balance)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        update_user(user_id, "inventory", collectible_items)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text=f"{EMOJI['back']} –í –º–µ–Ω—é", callback_data="action_back"))
        
        msg = bot.send_message(
            chat_id,
            f"‚ö° *–ü—Ä–æ–¥–∞–Ω–æ {count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤!*\n\n"
            f"‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total}‚ÇΩ\n"
            f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: {amount}‚ÇΩ (55%)\n"
            f"‚Ä¢ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ\n\n"
            f"‚Ä¢ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
        clean_messages(user_id, chat_id)
        add_message_to_delete(user_id, msg.message_id)
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ sell_all_items_callback: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ")
        error_msg = bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã")
        add_message_to_delete(user_id, error_msg.message_id)



# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
@bot.message_handler(commands=['clear_backups'])
def clear_backups(message):
    if not is_admin(message.from_user):
        return
    for filename in os.listdir(BACKUP_DIR):
        file_path = os.path.join(BACKUP_DIR, filename)
        try:
            os.remove(file_path)
        except:
            pass
    bot.reply_to(message, "‚úÖ –ë—ç–∫–∞–ø—ã –æ—á–∏—â–µ–Ω—ã!")

@bot.callback_query_handler(func=lambda call: call.data.startswith('sell_item_'))
def sell_item_callback(call):
    try:
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        user = init_user(user_id)
        
        if user.get("banned", False):
            bot.answer_callback_query(call.id, "‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!", show_alert=True)
            return
        
        item_index = int(call.data.split('_')[2])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–µ–¥–º–µ—Ç
        if item_index >= len(user["inventory"]):
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        item = user["inventory"][item_index]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–º
        if item.get("collectible", False):
            bot.answer_callback_query(call.id, "‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å!", show_alert=True)
            return
        
        # –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        sell_price = int(item["value"] * 0.55)  # 35% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        user["balance"] += sell_price
        user["inventory"].pop(item_index)
        update_user(user_id, "balance", user["balance"])
        update_user(user_id, "inventory", user["inventory"])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                text=f"{EMOJI['back']} –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
                callback_data="show_inventory"
            )
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
        msg = bot.send_message(
            chat_id,
            f"‚úÖ *–ü—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–¥–∞–Ω!*\n\n"
            f"üîπ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {item['name']}\n"
            f"üí∞ *–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:* {item['value']}‚ÇΩ\n"
            f"üíµ *–í—ã –ø–æ–ª—É—á–∏–ª–∏:* {sell_price}‚ÇΩ (35%)\n\n"
            f"üìä *–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:* {user['balance']}‚ÇΩ",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
        clean_messages(user_id, chat_id)
        add_message_to_delete(user_id, msg.message_id)
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ sell_item_callback: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–µ–¥–º–µ—Ç–∞")
        error_msg = bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–µ–¥–º–µ—Ç–∞")
        add_message_to_delete(user_id, error_msg.message_id)

@bot.callback_query_handler(func=lambda call: call.data == 'action_take')
def take_callback(call):
    try:
        user_id = call.from_user.id
        user = init_user(user_id)
        
        if not user.get("last_item"):
            bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∑–∞–±–æ—Ä–∞!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ –∫ –±–∞–ª–∞–Ω—Å—É
        item_value = user["last_item"]["value"]
        new_balance = user["balance"] + item_value
        update_user(user_id, "balance", new_balance)
        update_user(user_id, "last_item", None)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        user["inventory"].append(user["last_item"])
        update_user(user_id, "inventory", user["inventory"])
        
        bot.send_message(
            call.message.chat.id,
            f"‚úÖ {EMOJI['money']} <b>–ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!</b>\n"
            f"üí∞ <b>–ü–æ–ª—É—á–µ–Ω–æ:</b> +{item_value}‚ÇΩ\n"
            f"üíµ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance}‚ÇΩ",
            parse_mode="HTML",
            reply_markup=create_main_keyboard(user_id)
        )
        bot.answer_callback_query(call.id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
        if new_balance <= 0:
            game_over(call.message.chat.id, user_id)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ take_callback: {e}")
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞")

@bot.callback_query_handler(func=lambda call: call.data == 'action_invest')
def invest_callback(call):
    try:
        user_id = call.from_user.id
        user = init_user(user_id)
        
        if not user["last_item"]:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è!")
            return
        
        clean_messages(user_id, call.message.chat.id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–µ–π—Å–∞–º–∏
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        buttons = []
        
        for case_name, case_data in cases.items():
            item_value = user["last_item"]["value"]
            actual_price = max(0, case_data["price"] - item_value)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–µ–π—Å–∞
            if user["balance"] >= actual_price or item_value >= case_data["price"]:
                # –û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–µ–π—Å–∞ "–ú–∞–∂–æ—Ä"
                if case_name == "–ú–∞–∂–æ—Ä" and (user["balance"] + item_value) < 150:
                    continue
                    
                buttons.append(types.InlineKeyboardButton(
                    text=f"{case_data['emoji']} {case_name} ({actual_price}‚ÇΩ)",
                    callback_data=f"invest_{case_name}"
                ))
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥—ã
        for i in range(0, len(buttons), 2):
            keyboard.add(*buttons[i:i+2])
        
        keyboard.add(
            types.InlineKeyboardButton(
                text=f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞",
                callback_data="action_cancel"
            )
        )
        
        msg = bot.send_message(
            call.message.chat.id,
            f"{EMOJI['invest']} <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è:</b>\n\n"
            f"{EMOJI['item']} <b>–ü—Ä–µ–¥–º–µ—Ç:</b> <code>{user['last_item']['name']}</code>\n"
            f"{EMOJI['money']} <b>–¶–µ–Ω–∞:</b> <code>{user['last_item']['value']}‚ÇΩ</code>\n\n"
            f"{EMOJI['money']} <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{user['balance']}‚ÇΩ</code>",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        add_message_to_delete(user_id, msg.message_id)
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ invest_callback: {e}")
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–µ–π—Å–∞")

@bot.callback_query_handler(func=lambda call: call.data == 'withdraw')
def withdraw_callback(call):
    try:
        user_id = call.from_user.id
        user = init_user(user_id)
        
        if user.get("banned", False):
            bot.answer_callback_query(call.id, "‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—És
        if user["balance"] < MIN_WITHDRAW:
            bot.answer_callback_query(
                call.id, 
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAW}‚ÇΩ", 
                show_alert=True
            )
            return
            
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –≤—ã–≤–æ–¥–∞
        msg = bot.send_message(
            call.message.chat.id,
            f"üí∞ <b>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> {user['balance']}‚ÇΩ (~{user['balance']*WITHDRAW_RATE:.2f} —Ä—É–±.)\n"
            f"üìå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {MIN_WITHDRAW}‚ÇΩ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:",
            parse_mode="HTML",
            reply_markup=types.ForceReply()
        )
        bot.register_next_step_handler(msg, process_withdraw_amount)
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ withdraw_callback: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤")


@bot.callback_query_handler(func=lambda call: call.data == 'admin_unban')
def admin_unban_handler(call):
    if not is_admin(call.from_user):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    
    msg = bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ (–±–µ–∑ @):",
        reply_markup=types.ForceReply()
    )
    bot.register_next_step_handler(msg, process_unban_user)

def process_unban_user(message):
    username_to_unban = message.text.strip().lower()
    data = load_data()
    found = False
    
    for user_id, user_data in data.items():
        if user_data.get("username", "").lower() == username_to_unban:
            user_data["banned"] = False
            found = True
    
    if found:
        save_data(data)
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_to_unban} —Ä–∞–∑–±–∞–Ω–µ–Ω!")
    else:
        bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_to_unban} –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
def is_admin(user):
    return user.username and user.username.lower() == ADMIN_USERNAME.lower()

@bot.callback_query_handler(func=lambda call: call.data.startswith('invest_'))
def invest_case_callback(call):
    try:
        user_id = call.from_user.id
        case_name = call.data.split('_')[1]
        case = cases[case_name]
        user = init_user(user_id)
        
        if not user["last_item"]:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        item_value = user["last_item"]["value"]
        actual_price = max(0, case["price"] - item_value)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if user["balance"] < actual_price and item_value < case["price"]:
            bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        
        # –û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–µ–π—Å–∞ "–ú–∞–∂–æ—Ä"
        if case_name == "–ú–∞–∂–æ—Ä" and (user["balance"] + item_value) < 150:
            bot.answer_callback_query(call.id, "–î–ª—è —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 150‚ÇΩ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–∞!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        change = item_value - case["price"]
        new_balance = user["balance"] + change if change > 0 else user["balance"] - actual_price
        update_user(user_id, "balance", new_balance)
        update_user(user_id, "last_item", None)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–µ–π—Å
        new_item = random.choice(case["items"])
        update_user(user_id, "last_item", new_item)
        update_user(user_id, "last_case", case_name)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        message = [
            f"{EMOJI['win']} <b>–í—ã –æ—Ç–∫—Ä—ã–ª–∏ {case_name} –∫–µ–π—Å!</b>",
            f"{EMOJI['item']} <b>–ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç:</b> <code>{new_item['name']}</code>",
            f"{EMOJI['money']} <b>–¶–µ–Ω–∞:</b> <code>{new_item['value']}‚ÇΩ</code>"
        ]
        
        if change > 0:
            message.append(f"{EMOJI['money']} <b>–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ:</b> +{change}‚ÇΩ")
        
        message.append(f"{EMOJI['money']} <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{new_balance}‚ÇΩ</code>")
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton(text=f"{EMOJI['take']} –ó–∞–±—Ä–∞—Ç—å (+{new_item['value']}‚ÇΩ)", callback_data="action_take"),
            types.InlineKeyboardButton(text=f"{EMOJI['invest']} –í–ª–æ–∂–∏—Ç—å", callback_data="action_invest")
        )
        
        bot.send_message(
            call.message.chat.id,
            "\n\n".join(message),
            parse_mode="HTML",
            reply_markup=keyboard
        )
        bot.answer_callback_query(call.id)
        if new_balance <= 0:
            time.sleep(2)
            game_over(call.message.chat.id, user_id)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ invest_case_callback: {e}")
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith('add_by_'))
def choose_add_method(call):
    method = call.data.split('_')[-1]
    if method == "id":
        prompt = "üìù –í–≤–µ–¥–∏—Ç–µ Telegram ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: <code>123456789 500</code>"
    elif method == "username":
        prompt = "üìù –í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º (–±–µ–∑ @) –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: <code>username 500</code>"
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥")
        return
    
    msg = bot.send_message(
        call.message.chat.id,
        prompt,
        parse_mode="HTML",
        reply_markup=types.ForceReply()
    )
    bot.register_next_step_handler(msg, lambda m: process_payment(m, method))
def process_payment(message, method):
    try:
        if not is_admin(message.from_user):
            bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        parts = message.text.strip().split(maxsplit=1)
        if len(parts) != 2:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: [—é–∑–µ—Ä–Ω–µ–π–º/ID] [—Å—É–º–º–∞]")
            return
        identifier, amount_str = parts
        try:
            amount = int(amount_str)
            if amount <= 0:
                bot.reply_to(message, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
                return
        except ValueError:
            bot.reply_to(message, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return
        data = load_data()    
        if method == "id":
            try:
                user_id = int(identifier)
                user_data = data.get(str(user_id))
                if not user_data:
                    bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return
            except ValueError:
                bot.reply_to(message, "‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return
        else:
            clean_username = identifier.lstrip('@').lower()
            found_users = [(uid, u) for uid, u in data.items() 
                         if u.get('username', '').lower() == clean_username]  
            if not found_users:
                bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{clean_username} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            if len(found_users) > 1:
                bot.reply_to(message, f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(found_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID")
                return
            user_id, user_data = found_users[0]
        old_balance = user_data.get("balance", 0)
        new_balance = old_balance + amount
        user_data["balance"] = new_balance
        save_data(data)
        recipient = f"@{user_data.get('username', '')}" if method == "username" else f"ID {user_id}"
        response = (
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ!\n\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient}\n"
            f"üí∞ –ë—ã–ª–æ: {old_balance}‚ÇΩ\n"
            f"üíµ –ó–∞—á–∏—Å–ª–µ–Ω–æ: +{amount}‚ÇΩ\n"
            f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ"
        )  
        bot.reply_to(message, response)
        try:
            bot.send_message(
                user_id,
                f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—á–∏—Å–ª–∏–ª –≤–∞–º {amount}‚ÇΩ!\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_payment: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
def process_admin_add_money(message):
    try:
        global current_payment_method
        method = current_payment_method
        if not is_admin(message.from_user):
            bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        parts = message.text.split()
        if len(parts) != 2:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: [ID/—é–∑–µ—Ä–Ω–µ–π–º] [—Å—É–º–º–∞]")
            return
        identifier, amount_str = parts
        try:
            amount = int(amount_str)
            if amount <= 0:
                bot.reply_to(message, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
                return
        except ValueError:
            bot.reply_to(message, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return
        data = load_data()
        user = None
        if method == "id":
            try:
                user_id = int(identifier)
                user = data.get(str(user_id))
                if not user:
                    bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return
            except ValueError:
                bot.reply_to(message, "‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return
        else:
            clean_username = identifier.lstrip('@').lower()
            found_users = [
                (uid, u) for uid, u in data.items() 
                if u.get('username', '').lower() == clean_username
            ]
            
            if not found_users:
                bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{clean_username} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            if len(found_users) > 1:
                bot.reply_to(message, f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(found_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏")
                return
            user_id, user = found_users[0]
        old_balance = user.get("balance", 0)
        new_balance = old_balance + amount
        user["balance"] = new_balance
        save_data(data)

        reply_text = [
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ!",
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {'@' + user.get('username', '') if method == 'username' else 'ID: ' + str(user_id)}",
            f"üí∞ –ë—ã–ª–æ: {old_balance}‚ÇΩ",
            f"üíµ –ó–∞—á–∏—Å–ª–µ–Ω–æ: +{amount}‚ÇΩ",
            f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ"
        ]
        
        bot.reply_to(message, "\n".join(reply_text))

        try:
            bot.send_message(
                user_id,
                f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—á–∏—Å–ª–∏–ª –≤–∞–º {amount}‚ÇΩ!\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_admin_add_money: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏")

@bot.callback_query_handler(func=lambda call: call.data == 'refill_balance')
def refill_balance_callback(call):
    try:
        user_id = call.from_user.id
        user = init_user(user_id)
        
        if user.get("banned", False):
            bot.answer_callback_query(call.id, "‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!", show_alert=True)
            return

        current_time = datetime.now()
        last_refill = user.get("last_refill")
        
        if last_refill:
            last_refill = datetime.strptime(last_refill, "%Y-%m-%d %H:%M:%S")
            time_left = (last_refill + timedelta(hours=6)) - current_time
            
            if time_left.total_seconds() > 0:
                hours = time_left.seconds // 3600
                minutes = (time_left.seconds % 3600) // 60
                bot.answer_callback_query(
                    call.id, 
                    f"‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º", 
                    show_alert=True
                )
                return

        current_balance = user["balance"]
        new_balance = current_balance + REFILL_AMOUNT
        update_user(user_id, "balance", new_balance)
        update_user(user_id, "last_refill", current_time.strftime("%Y-%m-%d %H:%M:%S"))
        
        bot.send_message(
            call.message.chat.id,
            f"{EMOJI['money']} <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {REFILL_AMOUNT}‚ÇΩ!</b>\n"
            f"üí∞ <b>–ë—ã–ª–æ:</b> {current_balance}‚ÇΩ\n"
            f"üíµ <b>–°—Ç–∞–ª–æ:</b> {new_balance}‚ÇΩ\n\n"
            f"‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤",
            parse_mode="HTML",
            reply_markup=create_main_keyboard(user_id)
        )
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ refill_balance_callback: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_ban')
def admin_ban_handler(call):
    
    if not is_admin(call.from_user):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    
    msg = bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞ (–±–µ–∑ @):",
        reply_markup=types.ForceReply()
    )
    bot.register_next_step_handler(msg, process_ban_user)

def process_ban_user(message):
    username_to_ban = message.text.strip()
    data = load_data()
    
    for user_id, user_data in data.items():
        if user_data.get("username", "").lower() == username_to_ban.lower():
            user_data["banned"] = True
            save_data(data)
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_to_ban} –∑–∞–±–∞–Ω–µ–Ω!")
            return
    
    bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_to_ban} –Ω–µ –Ω–∞–π–¥–µ–Ω")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_reset')
def admin_reset_handler(call):

    if not is_admin(call.from_user):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    
    msg = bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è (–±–µ–∑ @):",
        reply_markup=types.ForceReply()
    )
    bot.register_next_step_handler(msg, process_reset_user)

def process_reset_user(message):
    username_to_reset = message.text.strip()
    data = load_data()
    
    for user_id, user_data in data.items():
        if user_data.get("username", "").lower() == username_to_reset.lower():
            user_data.update({
                "balance": INITIAL_BALANCE,
                "last_item": None,
                "last_case": None
            })
            save_data(data)
            bot.reply_to(message, f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username_to_reset} –æ–±–Ω—É–ª–µ–Ω!")
            return
    
    bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_to_reset} –Ω–µ –Ω–∞–π–¥–µ–Ω")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_stats')
def admin_stats_handler(call):
    if not is_admin(call.from_user):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    try:
        data = load_data()
        total_users = len(data)
        active_users = sum(1 for user in data.values() if user.get('balance', 0) > 0)
        total_balance = sum(user.get('balance', 0) for user in data.values())
        banned_users = sum(1 for user in data.values() if user.get('banned', False))
        case_stats = {case: 0 for case in cases}
        for user in data.values():
            if 'last_case' in user and user['last_case'] in case_stats:
                case_stats[user['last_case']] += 1
        stats_message = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
            f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
            f"üë§ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> {active_users}\n"
            f"‚õî <b>–ó–∞–±–∞–Ω–µ–Ω–æ:</b> {banned_users}\n"
            f"üí∞ <b>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {total_balance}‚ÇΩ\n\n"
            f"üì¶ <b>–û—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤:</b>\n"
        )
        for case, count in case_stats.items():
            stats_message += f"  {cases[case]['emoji']} {case}: {count}\n"
        top_users = sorted(
            [(u['username'], u.get('balance', 0)) 
             for u in data.values() 
             if 'username' in u],
            key=lambda x: x[1],
            reverse=True
        )[:5]
        stats_message += "\nüèÜ <b>–¢–æ–ø-5 –∏–≥—Ä–æ–∫–æ–≤:</b>\n"
        for i, (username, balance) in enumerate(top_users, 1):
            stats_message += f"{i}. {username}: {balance}‚ÇΩ\n"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data="admin_stats"
            ),
            types.InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="action_back"
            )
        )     
        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=stats_message,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        except:
            bot.send_message(
                call.message.chat.id,
                stats_message,
                parse_mode="HTML",
                reply_markup=keyboard
            )      
        bot.answer_callback_query(call.id) 
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ admin_stats_handler: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@bot.callback_query_handler(func=lambda call: call.data == 'show_top')
def show_top_callback(call):
    try:
        user_id = call.from_user.id
        user = init_user(user_id)    
        if user.get("banned", False):
            bot.answer_callback_query(call.id, "‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!", show_alert=True)
            return     
        data = load_data()
        valid_users = []
        for user_data in data.values():
            if not all(key in user_data for key in ['username', 'balance']):
                continue
            username = user_data['username'] or f"–ò–≥—Ä–æ–∫_{id}"
            valid_users.append({
                'username': username,
                'balance': user_data['balance']
            })
        top_users = sorted(valid_users, key=lambda x: x['balance'], reverse=True)[:10]
        top_text = f"{EMOJI['top']} <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n"
        for i, player in enumerate(top_users, 1):
            top_text += f"{i}. {player['username']}: {player['balance']}‚ÇΩ\n"
        current_username = user.get('username', f"–ò–≥—Ä–æ–∫_{user_id}")
        if not any(p['username'] == current_username for p in top_users):
            user_balance = user.get('balance', 0)
            user_position = next((i+1 for i, p in enumerate(valid_users) 
                               if p['username'] == current_username), '>10')
            top_text += f"\n...\n–í–∞—à–µ –º–µ—Å—Ç–æ: {user_position}. {current_username}: {user_balance}‚ÇΩ"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
            callback_data="action_back"
        ))
        
        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=top_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        except:
            bot.send_message(
                call.message.chat.id,
                top_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_top_callback: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞")
        print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data}")  # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö

@bot.callback_query_handler(func=lambda call: call.data == 'admin_add_money')
def admin_add_money_handler(call):
    if not is_admin(call.from_user):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton(text="üÜî –ü–æ ID", callback_data="add_by_id"),
        types.InlineKeyboardButton(text="@ –ü–æ —é–∑–µ—Ä–Ω–µ–π–º—É", callback_data="add_by_username")
    )
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üî¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

def process_admin_add_money(message):
    try:
        if not is_admin(message.from_user):
            bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        parts = message.text.split()
        if len(parts) != 2:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ID –°—É–º–º–∞")
            return

        user_id, amount = parts
        try:
            user_id = int(user_id)
            amount = int(amount)  
            if amount <= 0:
                bot.reply_to(message, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
                return
        except ValueError:
            bot.reply_to(message, "‚ùå ID –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")
            return
        data = load_data()
        user_id_str = str(user_id)
        if user_id_str not in data:
            bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        user_data = data[user_id_str]
        old_balance = user_data.get("balance", 0)
        new_balance = old_balance + amount
        user_data["balance"] = new_balance
        save_data(data)
        bot.reply_to(
            message,
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ!\n\n"
            f"üë§ ID: {user_id}\n"
            f"üí∞ –ë—ã–ª–æ: {old_balance}‚ÇΩ\n"
            f"üíµ –ó–∞—á–∏—Å–ª–µ–Ω–æ: +{amount}‚ÇΩ\n"
            f"üí≥ –°—Ç–∞–ª–æ: {new_balance}‚ÇΩ"
        )
        try:
            bot.send_message(
                user_id,
                f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—á–∏—Å–ª–∏–ª –≤–∞–º {amount}‚ÇΩ!\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ"
            )
        except:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_admin_add_money: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏")

@bot.callback_query_handler(func=lambda call: call.data in ['action_back', 'action_cancel'])
def back_callback(call):
    user = init_user(call.from_user.id)
    if user.get("banned", False):
        bot.answer_callback_query(call.id, "‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!", show_alert=True)
        return
    user_id = call.from_user.id
    user = init_user(user_id)
    
    clean_messages(user_id, call.message.chat.id)
    
    if call.data == 'action_cancel' and user["last_item"]:
        new_balance = user["balance"] + user["last_item"]["value"]
        update_user(user_id, "balance", new_balance)
        update_user(user_id, "last_item", None)
    
    msg = bot.send_message(
        call.message.chat.id,
        f"{EMOJI['money']} <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{user['balance']} —Ä—É–±.</code>\n"
        f"{EMOJI['case']} <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å:</b>",
        parse_mode="HTML",
        reply_markup=create_main_keyboard(user_id)
    )
    
    add_message_to_delete(user_id, msg.message_id)
    bot.answer_callback_query(call.id)

def game_over(chat_id, user_id):
    clean_messages(user_id, chat_id)
    update_user(user_id, "balance", INITIAL_BALANCE)
    update_user(user_id, "last_item", None)
    update_user(user_id, "last_case", None)
    update_user(user_id, "last_refill", None)
    
    msg = bot.send_message(
        chat_id,
        f"{EMOJI['lose']} <b>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à –±–∞–ª–∞–Ω—Å –æ–ø—É—Å—Ç–∏–ª—Å—è –¥–æ 0.</b>\n\n"
        f"{EMOJI['money']} <b>–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> <code>{INITIAL_BALANCE} —Ä—É–±.</code>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
        parse_mode="HTML"
    )
    
    add_message_to_delete(user_id, msg.message_id)

def repair_data():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                json.load(f)
        except:
            with open(DATA_FILE, 'w', encoding='utf-8') as f:
                json.dump({}, f)

repair_data()

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        if not os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'w', encoding='utf-8') as f:
                json.dump({}, f)    
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        save_data(load_data())
